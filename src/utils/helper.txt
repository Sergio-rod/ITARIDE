import React, { useCallback, useEffect, useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  Button,
  ImageBackground,
  TextInput,
  TouchableOpacity,
  KeyboardAvoidingView,
  Platform,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { Feather } from "@expo/vector-icons";
import blackhole from '../../assets/blackhole.jpg'

import colors from "../../constants/colors";
import { useSelector } from "react-redux";
import Bubble from "../components/Bubble";
import { createChat } from "../utils/actions/chatActions";

const ChatScreen = (props) => {
  


  const userData = useSelector(state => state.auth.userData);

  const storedUsers = useSelector(state => state.users.storedUsers);

  const [chatUsers, setChatUsers] = useState([]);

  const [messageText, setMessageText] = useState("");


  const [chatId,setChatId] = useState(props.route?.params?.chatId);

  const chatData = props.route?.params?.newChatData;

  const getChatTitleFromName = () => {
    const otherUserId = chatUsers.find((uid) => uid !== userData.userId);
    const otherUserData = storedUsers[otherUserId];

    {/*Intercambiar otherUserData.controlNumber -> por el nombre del usuario, igual para mail*/}

    return  otherUserData && `${otherUserData.controlNumber} ${otherUserData.mail}`
  }



  useEffect(() => {
    props.navigation.setOptions({
      headerTitle:getChatTitleFromName()  
    });



    setChatUsers(chatData.users);
  }, [chatUsers]);


  

  const sendMessage = useCallback(async() => {
    try {
      let id= chatId;
      console.log(chatId)

      if(!id){
        //not chat id. create the chat
        id= await createChat(userData.userId,props.route.params.newChatData)
        setChatId(id);

        console.log(userData)
  
  
  
      }
      
      
    } catch (error) {
      console.log(error)
      
    }
    setMessageText("");
  }, [messageText,chatId]);

  return (
    <SafeAreaView edges={["right", "left", "bottom"]} style={styles.container}>
      <KeyboardAvoidingView
        style={styles.screen}
        behavior={Platform.OS === "ios" ? "padding" : undefined}
        keyboardVerticalOffset={100}>
        <ImageBackground
          source={blackhole}
          style={styles.backgroundImage}
        >
          <View style={{backgroundColor: 'transparent'}}>

            {

              !chatId && <Bubble text="This is a new chat" type="system" />

            }

          </View>



        </ImageBackground>

        <View style={styles.inputContainer}>
          <TouchableOpacity
            style={styles.mediaButton}
            onPress={() => console.log("Pressed!")}
          >
            <Feather name="plus" size={24} color={colors.blue} />
          </TouchableOpacity>

          <TextInput
            style={styles.textbox}
            value={messageText}
            onChangeText={(text) => setMessageText(text)}
            onSubmitEditing={sendMessage}
          />

          {messageText === "" && (
            <TouchableOpacity
              style={styles.mediaButton}
              onPress={() => console.log("Pressed!")}
            >
              <Feather name="camera" size={24} color={colors.blue} />
            </TouchableOpacity>
          )}

          {messageText !== "" && (
            <TouchableOpacity
              style={{ ...styles.mediaButton, ...styles.sendButton }}
              onPress={sendMessage}
            >
              <Feather name="send" size={20} color={"white"} />
            </TouchableOpacity>
          )}
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "column",
  },
  screen: {
    flex: 1
  },
  backgroundImage: {
    flex: 1,
  },
  inputContainer: {
    flexDirection: "row",
    paddingVertical: 8,
    paddingHorizontal: 10,
    height: 50,
  },
  textbox: {
    flex: 1,
    borderWidth: 1,
    borderRadius: 50,
    borderColor: colors.lightGrey,
    marginHorizontal: 15,
    paddingHorizontal: 12,
  },
  mediaButton: {
    alignItems: "center",
    justifyContent: "center",
    width: 35,
  },
  sendButton: {
    backgroundColor: colors.blue,
    borderRadius: 50,
    padding: 8,
  },
});

export default ChatScreen;

import React, { useEffect, useState } from "react";
import { View, Text } from "native-base";
import { HeaderButtons, Item } from "react-navigation-header-buttons";
import CustomHeaderButton from "../components/CustomHeaderButton";
import screen from "../utils/screenNames";
import { ActivityIndicator, FlatList, StyleSheet } from "react-native";
import colors from "../../constants/colors";
import { FontAwesome } from "@expo/vector-icons";
import { TextInput } from "react-native-gesture-handler";
import commonStyles from "../../constants/commonStyles";
import { searchUsers } from "../utils/actions/userActions";
import DataItem from "../components/DataItem";
import { useDispatch, useSelector } from "react-redux";
import { setStoredUsers } from "../../store/userSlice";


const NewChatScreen = props => {

    const dispatch = useDispatch();

    const [isLoading, setIsLoading] = useState(false);
    const [users, setUsers] = useState();
    const [noResultsFound, setNoResultsFound] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');

    const userData = useSelector(state => state.auth.userData);

    useEffect(() => {
        props.navigation.setOptions({
            headerLeft: () => {
                return <HeaderButtons HeaderButtonComponent={CustomHeaderButton}>
                    <Item
                        title="Close"
                        onPress={() => props.navigation.goBack()}/>
                </HeaderButtons>
            },
            headerTitle: "New chat"
        })
    }, []);

    useEffect(() => {
        const delaySearch = setTimeout(async () => {
            if (!searchTerm || searchTerm === "") {
                setUsers();
                setNoResultsFound(false);
                return;
            }

            setIsLoading(true);

            const usersResult = await searchUsers(searchTerm);
            delete usersResult[userData.userId];
            setUsers(usersResult);

            if (Object.keys(usersResult).length === 0) {
                setNoResultsFound(true);
            }
            else {
                setNoResultsFound(false);
                dispatch(setStoredUsers({newUsers: usersResult}))
            }

            setIsLoading(false);
        }, 500);

        return () => clearTimeout(delaySearch);
    }, [searchTerm]);


    const userPressed = userId => {
        props.navigation.navigate(screen.chats,{
            selectedUserId:userId
        });
    }
    
    return <View flex={1}>
        <View style={styles.searchContainer}>
            <FontAwesome name="search" size={15} color={colors.lightGrey} />

            <TextInput
                placeholder='Search'
                style={styles.searchBox}
                onChangeText={(text) => setSearchTerm(text)}
            />
        </View>

        {
            isLoading && 
            <View style={commonStyles.center}>
                <ActivityIndicator size={'large'} color={colors.primary} />
            </View>
        }

        {
            !isLoading && !noResultsFound && users &&
            <FlatList
                data={Object.keys(users)}
                renderItem={(itemData) => {
                    const userId = itemData.item;
                    const userData = users[userId]


                    return <DataItem
                    
                        title={`${userData.controlNumber} ${userData.mail}`}
                        subTitle= {`${userData.about}`}
                        // image={userData.profilePicture}
                        onPress={()=>userPressed(userId)}
                        >
                        

                        
                    </DataItem>
                }}
            />
        }

        {
            !isLoading && noResultsFound && (
                <View style={commonStyles.center}>
                    <FontAwesome
                        name="question"
                        size={55}
                        color={colors.lightGrey}
                        style={styles.noResultsIcon}/>
                    <Text style={styles.noResultsText}>No users found!</Text>
                </View>
            )
        }

        {
            !isLoading && !users && (
                <View style={commonStyles.center}>
                    <FontAwesome
                        name="users"
                        size={55}
                        color={colors.lightGrey}
                        style={styles.noResultsIcon}/>
                    <Text style={styles.noResultsText}>Enter a name to search for a user!</Text>
                </View>
            )
        }

    </View>
};

const styles = StyleSheet.create({
    searchContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: colors.extralightGrey,
        height: 30,
        marginVertical: 8,
        paddingHorizontal: 8,
        paddingVertical: 5,
        borderRadius: 5
    },
    searchBox: {
        marginLeft: 8,
        fontSize: 15,
        width: '100%',
      
    },
    noResultsIcon: {
        marginBottom: 20
    },
    noResultsText: {
        color: colors.textColor,
        letterSpacing: 0.3
    }
})

export default NewChatScreen;

import React, { useCallback, useEffect, useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  Button,
  ImageBackground,
  TextInput,
  TouchableOpacity,
  KeyboardAvoidingView,
  Platform,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { Feather } from "@expo/vector-icons";
import blackhole from '../../assets/blackhole.jpg'

import colors from "../../constants/colors";
import { useSelector } from "react-redux";
import Bubble from "../components/Bubble";
import { createChat } from "../utils/actions/chatActions";

const ChatScreen = (props) => {
  


  const userData = useSelector(state => state.auth.userData);

  const storedUsers = useSelector(state => state.users.storedUsers);

  const [chatUsers, setChatUsers] = useState([]);

  const [messageText, setMessageText] = useState("");


  const [chatId,setChatId] = useState(props.route?.params?.chatId);

  const chatData = props.route?.params?.newChatData;

  const getChatTitleFromName = () => {
    const otherUserId = chatUsers.find((uid) => uid !== userData.userId);
    const otherUserData = storedUsers[otherUserId];

    {/*Intercambiar otherUserData.controlNumber -> por el nombre del usuario, igual para mail*/}

    return  otherUserData && `${otherUserData.controlNumber} ${otherUserData.mail}`
  }



  useEffect(() => {
    props.navigation.setOptions({
      headerTitle:getChatTitleFromName()  
    });



    setChatUsers(chatData.users);
  }, [chatUsers]);


  

  const sendMessage = useCallback(async() => {
    try {
      let id= chatId;
      console.log(chatId)

      if(!id){
        //not chat id. create the chat
        id= await createChat(userData.userId,props.route.params.newChatData)
        setChatId(id);

        console.log(userData)
  
  
  
      }
      
      
    } catch (error) {
      console.log(error)
      
    }
    setMessageText("");
  }, [messageText,chatId]);

  return (
    <SafeAreaView edges={["right", "left", "bottom"]} style={styles.container}>
      <KeyboardAvoidingView
        style={styles.screen}
        behavior={Platform.OS === "ios" ? "padding" : undefined}
        keyboardVerticalOffset={100}>
        <ImageBackground
          source={blackhole}
          style={styles.backgroundImage}
        >
          <View style={{backgroundColor: 'transparent'}}>

            {

              !chatId && <Bubble text="This is a new chat" type="system" />

            }

          </View>



        </ImageBackground>

        <View style={styles.inputContainer}>
          <TouchableOpacity
            style={styles.mediaButton}
            onPress={() => console.log("Pressed!")}
          >
            <Feather name="plus" size={24} color={colors.blue} />
          </TouchableOpacity>

          <TextInput
            style={styles.textbox}
            value={messageText}
            onChangeText={(text) => setMessageText(text)}
            onSubmitEditing={sendMessage}
          />

          {messageText === "" && (
            <TouchableOpacity
              style={styles.mediaButton}
              onPress={() => console.log("Pressed!")}
            >
              <Feather name="camera" size={24} color={colors.blue} />
            </TouchableOpacity>
          )}

          {messageText !== "" && (
            <TouchableOpacity
              style={{ ...styles.mediaButton, ...styles.sendButton }}
              onPress={sendMessage}
            >
              <Feather name="send" size={20} color={"white"} />
            </TouchableOpacity>
          )}
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "column",
  },
  screen: {
    flex: 1
  },
  backgroundImage: {
    flex: 1,
  },
  inputContainer: {
    flexDirection: "row",
    paddingVertical: 8,
    paddingHorizontal: 10,
    height: 50,
  },
  textbox: {
    flex: 1,
    borderWidth: 1,
    borderRadius: 50,
    borderColor: colors.lightGrey,
    marginHorizontal: 15,
    paddingHorizontal: 12,
  },
  mediaButton: {
    alignItems: "center",
    justifyContent: "center",
    width: 35,
  },
  sendButton: {
    backgroundColor: colors.blue,
    borderRadius: 50,
    padding: 8,
  },
});

export default ChatScreen;

import { child, getDatabase,push, ref } from "firebase/database";
import { getFirebaseApp } from "../firebaseHelper";

export const createChat = async (loggedInUserId,chatData) => {

    const newChatData  = {
        ...chatData,
        createdby : loggedInUserId,
        updatedby: loggedInUserId,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };

    const app= getFirebaseApp();
    const dbRef = ref(getDatabase(app));
    const newChat = await push(child(dbRef,'chats'),newChatData);


    const chatUsers = newChatData.users;

    for (let i = 0; i < chatUsers.length; i++) {
        const userId = chatUsers[i];
        await push(child(dbRef,`userChats/${userId}`), newChat.key);
        
    }
    
    return newChat.key;

}
